// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tesla

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FlatbuffersEnvelope struct {
	_tab flatbuffers.Table
}

func GetRootAsFlatbuffersEnvelope(buf []byte, offset flatbuffers.UOffsetT) *FlatbuffersEnvelope {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlatbuffersEnvelope{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FlatbuffersEnvelope) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlatbuffersEnvelope) Table() flatbuffers.Table {
	return rcv._tab
}

// txid: unique transaction id of this message
func (rcv *FlatbuffersEnvelope) Txid(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) TxidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) TxidBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

// txid: unique transaction id of this message
func (rcv *FlatbuffersEnvelope) MutateTxid(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

// topic: used for rooting messages to backend queues
func (rcv *FlatbuffersEnvelope) Topic(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) TopicLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) TopicBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

// topic: used for rooting messages to backend queues
func (rcv *FlatbuffersEnvelope) MutateTopic(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *FlatbuffersEnvelope) MessageType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) MutateMessageType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *FlatbuffersEnvelope) Message(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *FlatbuffersEnvelope) MessageId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) MessageIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatbuffersEnvelope) MessageIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatbuffersEnvelope) MutateMessageId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func FlatbuffersEnvelopeStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func FlatbuffersEnvelopeAddTxid(builder *flatbuffers.Builder, txid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(txid), 0)
}
func FlatbuffersEnvelopeStartTxidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FlatbuffersEnvelopeAddTopic(builder *flatbuffers.Builder, topic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(topic), 0)
}
func FlatbuffersEnvelopeStartTopicVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FlatbuffersEnvelopeAddMessageType(builder *flatbuffers.Builder, messageType byte) {
	builder.PrependByteSlot(2, messageType, 0)
}
func FlatbuffersEnvelopeAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(message), 0)
}
func FlatbuffersEnvelopeAddMessageId(builder *flatbuffers.Builder, messageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(messageId), 0)
}
func FlatbuffersEnvelopeStartMessageIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FlatbuffersEnvelopeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
